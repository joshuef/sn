name: Bump Version

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "30 4 * * *"

jobs:

  cli-install-tests:
      name: cli install tests
      runs-on: ${{ matrix.os }}
      strategy:
        fail-fast: false
        matrix:
          os: [ubuntu-latest, macos-latest]
      steps:
        - uses: actions/checkout@v2
        - shell: bash
          name: test install as root user
          run: |
            curl -so- $INSTALL_SCRIPT_URL | sudo bash
            if [[ ! -f /usr/local/bin/safe ]]; then
              echo "Failed to unpack safe to /usr/local/bin"
              exit 1
            fi
            expected_version=$(grep "^version" < sn_cli/Cargo.toml \
              | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
            actual_version=$(safe --version | awk '{ print $2 }')
            echo "Expected version: $expected_version"
            echo "Actual version: $actual_version"
            if [[ $actual_version != $expected_version ]]; then exit 1; fi
        - shell: bash
          name: test install as non-root user
          run: |
            curl -so- $INSTALL_SCRIPT_URL | bash
            if [[ ! -f "$HOME/.safe/cli/safe" ]]; then
              echo "Failed to unpack safe to $HOME/.safe/cli/safe"
              exit 1
            fi
            expected_version=$(grep "^version" < sn_cli/Cargo.toml \
              | head -n 1 | awk '{ print $3 }' | sed 's/\"//g')
            actual_version=$($HOME/.safe/cli/safe --version | awk '{ print $2 }')
            echo "Expected version: $expected_version"
            echo "Actual version: $actual_version"
            if [[ $actual_version != $expected_version ]]; then exit 1; fi
            # Since the installer attempts to update more than just the bashrc,
            # this isn't a comprehensive test, but I think it should do as a
            # starting point. Or until the other conditions could be reproduced.
            if ! $(cat "$HOME/.bashrc" | grep "^export PATH=\$PATH:$HOME/.safe/cli"); then
              echo "Installer has not updated the bashrc correctly"
              exit 1
            fi

  windows-cli-install-test:
    name: windows cli install test
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - shell: powershell
        name: run install
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; `
            iex ((New-Object System.Net.WebClient).DownloadString($env:POWERSHELL_INSTALL_SCRIPT_URL))
      - shell: powershell
        name: test install
        run: |
          # Use a new session to test the result of the install.
          # This is because of things like the PATH modification, which requires a new session.
          $installPath = Join-Path -Path $env:USERPROFILE -ChildPath ".safe\cli"
          $safeBinPath = Join-Path -Path $installPath -ChildPath "safe.exe"
          $failed = $false

          $list = Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* `
            | Where-Object { $_.DisplayName -like "Microsoft Visual C++*" } | Select-Object DisplayName
          if ($list) {
            echo "Visual C++ Redistributable was installed"
          } else {
            echo "Visual C++ Redistributable was not installed"
            $failed = $true
          }

          $local:currentPaths = [Environment]::GetEnvironmentVariable(
            'Path', [EnvironmentVariableTarget]::User) -split ';'
          if ($currentPaths -contains $installPath) {
            echo "CLI install path was added to user PATH variable"
          } else {
            echo "CLI install path was not added to user PATH variable"
            $failed = $true
          }

          if (Test-Path $safeBinPath) {
            echo "Detected safe binary at $safeBinPath"
          } else {
            echo "Expected safe binary at $safeBinPath"
            $failed = $true
          }

          if ($failed) {
            echo "Test run failed. Please see output to determine failure."
            exit 1
          }

  bump_version:
    if: github.repository_owner == 'maidsafe' && github.ref_name == 'main'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
          token: ${{ secrets.VERSION_BUMP_COMMIT_PAT }}
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true
      - shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      - shell: bash
        run: cargo install cargo-smart-release
      - shell: bash
        run: ./resources/scripts/bump_version.sh
      - name: push version bump commit and tags
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.VERSION_BUMP_COMMIT_PAT }}
          branch: main
          tags: true
      - name: Upload event file
        uses: actions/upload-artifact@main
        with:
          name: event-file
          path: ${{ github.event_path }}

